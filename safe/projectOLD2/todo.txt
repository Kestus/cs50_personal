1)  api
    - spotify (requires api client key and secret)
        - get token
        - format url for request
        - make api request
        - format response to a list of dictionaries, containing name of track and artist

    - youtube search (only needs API_KEY)
        - for each track make api search request
            - each request returns 3 most relevant search results
            - additionally check if name or artist is in the title of video
        - format response to a list of video id's

    - update temporary (spotify generated per user) playlists
    - db of playlists
    - db of youtube videos without duplicates

2)  flask
    - instead of making api call to create playlist (requires OAuth2):
        - db with playlist id, name, list of youtube id's
        - embed/ IFrame api playlist
            - loadPlaylist ( bugs )

        // youtube daily quota is only 10000 units and search request is 100u
            // maybe do search on behaf of the user

    - db for yt api keys
        - automate counter and reset counter every 00:00 Pacific Time

3) url parameters
    - playlists/<spotify_id>

4) web design
    - add new playlist page/form
    - latest page
        - grid of latests playlists in db
    - player page
        - iframe API limit 200 items
            - on load of playlist with more then 200 items,
                number of items in playlist shows correct amount at fits,
                but then jumps to 200.
            - didn't find solution in api itself

            // fix would require to build my own playlist, but then problem of API limits remain
                // bypass API limits by web scraping + db of videoId with names, thumbnail UTL and length
                    // first time load of long playlist would take ages

    - search (maybe dynamic search)
    - custom playlist



TODO:
    - logging/error handling
    - packaging
    - display errors



SCHEMA:

add => helpers.valid => database.getPlaylist => spotify.getID
    if exists => return spotify_id
    else => database.addPlaylist => spotify.info, spotify_data => youtube.search





add => url.valid => url.getID => database.getPlaylist
    if exists and does not need an update => redirect to playlist
    else => url.Format => database.addPlaylist(formattedURL, spotifyID) //update if needed

    database.addPlaylist(formattedURL, spotifyID):
        spotify.makeApiCall(formattedURL):
            spotify.getToken()
            declare headers
            make a call
                make additional calls (100max)
            
            format to dict of info + tracks list
            
            
        